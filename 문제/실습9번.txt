#include "GL/glew.h"
#include "GL/freeglut.h"
#include "GL/glm/glm.hpp"
#include "GL/glm/ext.hpp"
#include "GL/glm/gtc/matrix_transform.hpp"
#include <iostream>
#include "VertexShader.hpp"
#include "FragShader.hpp"
#include "ShaderProgram.hpp"
#include <vector>
#include <random>
#include <cmath>
#include <memory>
/*
VBO는 최소 250000개의 정점을 담고있을수있다.
Depends on the video card and the amount of video RAM.
ATI cards with 128 MB of video RAM are limited by the drivers to a maximum of 32 MB per vertex buffer. 
With multiple buffers the total can easily go beyond 32 MB with no problem, but I haven’t tried to find a cap.
*/

int windowNumber = 0;
int percentage = 0;
bool isTimerOn = false;
bool isCube = true;
bool isCul = true;
bool isWire = true;
float rads = 0.0f;
GLvoid drawScene(GLvoid);
GLvoid Reshape(int w, int h);
GLvoid keyBoardEvent(unsigned char key, int x, int y);
GLvoid timerFunc(int);

GLuint compileShaders();


int WIDTH = 800;
int HEIGTH = 600;

GLuint shaderProgramID;


float Xaxis[] =
{
	  -1.0f,0.0f,0.0f,
	  1.0f,0.0f,0.0f

};

float Yaxis[] =
{
	0.0f,-1.0f,0.0f,
	0.0f,1.0f,0.0f
};
float cube[] =
{
	-1.0f,-1.0f,-1.0f, // triangle 1 : begin
	-1.0f,-1.0f, 1.0f,
	-1.0f, 1.0f, 1.0f, // triangle 1 : end
	1.0f, 1.0f,-1.0f, // triangle 2 : begin
	-1.0f,-1.0f,-1.0f,
	-1.0f, 1.0f,-1.0f, // triangle 2 : end
	1.0f,-1.0f, 1.0f,
	-1.0f,-1.0f,-1.0f,
	1.0f,-1.0f,-1.0f,
	1.0f, 1.0f,-1.0f,
	1.0f,-1.0f,-1.0f,
	-1.0f,-1.0f,-1.0f,
	-1.0f,-1.0f,-1.0f,
	-1.0f, 1.0f, 1.0f,
	-1.0f, 1.0f,-1.0f,
	1.0f,-1.0f, 1.0f,
	-1.0f,-1.0f, 1.0f,
	-1.0f,-1.0f,-1.0f,
	-1.0f, 1.0f, 1.0f,
	-1.0f,-1.0f, 1.0f,
	1.0f,-1.0f, 1.0f,
	1.0f, 1.0f, 1.0f,
	1.0f,-1.0f,-1.0f,
	1.0f, 1.0f,-1.0f,
	1.0f,-1.0f,-1.0f,
	1.0f, 1.0f, 1.0f,
	1.0f,-1.0f, 1.0f,
	1.0f, 1.0f, 1.0f,
	1.0f, 1.0f,-1.0f,
	-1.0f, 1.0f,-1.0f,
	1.0f, 1.0f, 1.0f,
	-1.0f, 1.0f,-1.0f,
	-1.0f, 1.0f, 1.0f,
	1.0f, 1.0f, 1.0f,
	-1.0f, 1.0f, 1.0f,
	1.0f,-1.0f, 1.0f
};
float pyramid[]=
{
	-1.0f,-1.0f,1.0f,
	1.0f,-1.0f,1.0f,
	1.0f,-1.0f,-1.0f,
	1.0f,-1.0f,-1.0f,
	-1.0f,-1.0f,-1.0f,
	-1.0f,-1.0f,1.0f,//여기까지 밑면
	-1.0f,-1.0f,-1.0f,
	1.0f,-1.0f,-1.0f,
	0.0f,1.0f,0.0f,//여기까지 앞면
	-1.0f,-1.0f,1.0f,
	1.0f,-1.0f,1.0f,
	0.0f,1.0f,0.0f,//여기까지 뒷면
	1.0f,-1.0f,-1.0f,
	1.0f,-1.0f,1.0f,
	0.0f,1.0f,0.0f,//여기까지 오른면
	-1.0f,-1.0f,-1.0f,
	-1.0f,-1.0f,1.0f,
	0.0f,1.0f,0.0f,//여기까지 왼면

};
float color[] =
{
	 0.583f,  0.771f,  0.014f,
	0.609f,  0.115f,  0.436f,
	0.327f,  0.483f,  0.844f,
	0.822f,  0.569f,  0.201f,
	0.435f,  0.602f,  0.223f,
	0.310f,  0.747f,  0.185f,
	0.597f,  0.770f,  0.761f,
	0.559f,  0.436f,  0.730f,
	0.359f,  0.583f,  0.152f,
	0.483f,  0.596f,  0.789f,
	0.559f,  0.861f,  0.639f,
	0.195f,  0.548f,  0.859f,
	0.014f,  0.184f,  0.576f,
	0.771f,  0.328f,  0.970f,
	0.406f,  0.615f,  0.116f,
	0.676f,  0.977f,  0.133f,
	0.971f,  0.572f,  0.833f,
	0.140f,  0.616f,  0.489f,
	0.997f,  0.513f,  0.064f,
	0.945f,  0.719f,  0.592f,
	0.543f,  0.021f,  0.978f,
	0.279f,  0.317f,  0.505f,
	0.167f,  0.620f,  0.077f,
	0.347f,  0.857f,  0.137f,
	0.055f,  0.953f,  0.042f,
	0.714f,  0.505f,  0.345f,
	0.783f,  0.290f,  0.734f,
	0.722f,  0.645f,  0.174f,
	0.302f,  0.455f,  0.848f,
	0.225f,  0.587f,  0.040f,
	0.517f,  0.713f,  0.338f,
	0.053f,  0.959f,  0.120f,
	0.393f,  0.621f,  0.362f,
	0.673f,  0.211f,  0.457f,
	0.820f,  0.883f,  0.371f,
	0.982f,  0.099f,  0.879f

};
float pyramidColor[] =
{
	0.583f,  0.771f,  0.014f,
	0.609f,  0.115f,  0.436f,
	0.327f,  0.483f,  0.844f,
	0.822f,  0.569f,  0.201f,
	0.435f,  0.602f,  0.223f,
	0.310f,  0.747f,  0.185f,
	0.597f,  0.770f,  0.761f,
	0.559f,  0.436f,  0.730f,
	0.359f,  0.583f,  0.152f,
	0.483f,  0.596f,  0.789f,
	0.559f,  0.861f,  0.639f,
	0.195f,  0.548f,  0.859f,
	0.014f,  0.184f,  0.576f,
	0.771f,  0.328f,  0.970f,
	0.406f,  0.615f,  0.116f,
	0.676f,  0.977f,  0.133f,
	0.971f,  0.572f,  0.833f,
	0.140f,  0.616f,  0.489f,
};
float XaxisColor[] =
{
	1.0f,0.0f,0.0f,
	1.0f,0.0f,0.0f
};
float YaxisColor[] =
{
	1.0f,0.0f,0.0f,
	1.0f,0.0f,0.0f
};
unsigned int VBO[4], VAO[4], VBOC[4];

void main(int argc, char** argv)
{
	//create window
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(WIDTH, HEIGTH);
	windowNumber = glutCreateWindow("2016182044HJO");
	//GLEW init
	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK)
	{
		std::cerr << "Unable to initalize GLEW" << std::endl;
		exit(EXIT_FAILURE);
	}
	else
		std::cout << "GLEW initialized\n";

	shaderProgramID = compileShaders();

	for (int i = 0; i < 108; ++i)
	{
		cube[i] = cube[i] / 4.0f;
	}
	for (int i = 0; i < 54; ++i)
	{
		pyramid[i] = pyramid[i] / 4.0f;
	}
	glGenVertexArrays(4, VAO);
	glGenBuffers(4, VBO);
	glGenBuffers(4, VBOC);

	glBindVertexArray(VAO[0]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Xaxis), Xaxis, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBOC[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(XaxisColor), XaxisColor, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(1);


	glBindVertexArray(VAO[1]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yaxis), Yaxis, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBOC[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(YaxisColor), YaxisColor, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(1);

	glBindVertexArray(VAO[2]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(cube), cube, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBOC[2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(color), color, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(1);


	glBindVertexArray(VAO[3]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[3]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pyramid), pyramid, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBOC[3]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pyramidColor), pyramidColor, GL_DYNAMIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(1);
	glutDisplayFunc(drawScene);
	glutKeyboardFunc(keyBoardEvent);
	glutReshapeFunc(Reshape);//window의 모양이 바뀔때마다 호출될 함수를 등록한다.
	glutTimerFunc(100, timerFunc, 1);
	glutMainLoop();

}

GLvoid drawScene()//glutpostredisplay가 호출되면 DisplayFunc에 등록된 콜백함수가 호출된다.
{
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	if(isCul)
		glEnable(GL_DEPTH_TEST);
	else glDisable(GL_DEPTH_TEST);
	if (isWire)
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	else
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glUseProgram(shaderProgramID);
	auto transMatrix = glm::mat4(1.0f);
	
	auto transformLocation = glGetUniformLocation(shaderProgramID, "transform");
	glUniformMatrix4fv(transformLocation, 1, GL_FALSE, glm::value_ptr(transMatrix));
	
	glBindVertexArray(VAO[0]);
	glDrawArrays(GL_LINE_LOOP, 0, 2);
	glBindVertexArray(VAO[1]);
	glDrawArrays(GL_LINE_LOOP, 0, 2);
	transMatrix = glm::rotate(transMatrix, glm::radians(330.0f), glm::vec3(1.0f, 0.0f, 0.0f));
	transMatrix = glm::rotate(transMatrix, glm::radians(30.0f+rads), glm::vec3(0.0f, 1.0f, 0.0f));
	glUniformMatrix4fv(transformLocation, 1, GL_FALSE, glm::value_ptr(transMatrix));
	if (!isCube)
	{
		glBindVertexArray(VAO[3]);
		glDrawArrays(GL_TRIANGLES, 0, 18);
	}
	else
	{
		glBindVertexArray(VAO[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}
	//GL_LINES,GL_LINE_LOOP,GL_LINE_STRIP
	//두 선을 그리고 완전히 잇는선 그리고 마지막은 잇지 않는 선 그린다.
	glutSwapBuffers();//더블버퍼모드이기때문에 flush대신에 glutswapbuffers를 호출한다.
}

GLvoid Reshape(int w, int h)
{
	glViewport(0, 0, w, h);
	WIDTH = w;
	HEIGTH = h;
}




GLuint compileShaders()
{
	VertexShader vShader1("vertexSource.txt");
	vShader1.createAndCompile();
	FragShader fShader1("FragSource.txt");
	fShader1.createAndCompile();
	ShaderProgram ShaderProgram1;
	ShaderProgram1.attachAndLink({ fShader1.retShader(),vShader1.retShader() });

	return ShaderProgram1.retProgramID();
}

GLvoid keyBoardEvent(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 'c':
		isCube = true;
		break;
	case 'p':
		isCube = false;
		break;
	case 'h':
		if (isCul)
			isCul = false;
		else isCul = true;
		break;
	case 'y':
		if (isTimerOn)
			isTimerOn = false;
		else isTimerOn = true;
		break;
	case 'w':
		if (isWire)
			isWire = false;
		else isWire = true;
		break;
	default:
		break;
	}
	glutPostRedisplay();
}


GLvoid timerFunc(int index)
{
	if (isTimerOn)
	{
		rads += 2.0f;
	}
	glutTimerFunc(100, timerFunc, 1);
	glutPostRedisplay();
}
