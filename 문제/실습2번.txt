#include "GL/glew.h"
#include "GL/freeglut.h"
#include "GL/glm/glm.hpp"
#include "GL/glm/ext.hpp"
#include "GL/glm/gtc/matrix_transform.hpp"
#include <iostream>
#include <random>
//화면 중앙에 사각형을 그린다
//마우스를 클릭하여 사각형 클릭시 사각형 색바꾸고 윈도클릭시 윈도 컬러 바꾼다.
//glrectf 함수를써서 사각형을 그린다.
//glcolor3f를 glrect호출 직전에 호출한다.
int windowNumber = 0;
bool isTimerOn = false;
GLvoid drawScene(GLvoid);
GLvoid Reshape(int w, int h);
GLvoid MouseAction(int,int,int,int);
std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_real_distribution<> urd(0.0f, 1.0f);
const int WIDTH = 800;
const int HEIGTH = 600;
const GLfloat RECTSIZE = 0.5;
void main(int argc, char** argv)
{
	//create window
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(WIDTH, HEIGTH);
	windowNumber = glutCreateWindow("2016182044HJO");

	//GLEW init
	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK)
	{
		std::cerr << "Unable to initalize GLEW" << std::endl;
		exit(EXIT_FAILURE);
	}
	else
		std::cout << "GLEW initialized\n";
	glutDisplayFunc(drawScene);
	glutReshapeFunc(Reshape);//window의 모양이 바뀔때마다 호출될 함수를 등록한다.
	glutMouseFunc(MouseAction);
	glutMainLoop();
}
GLvoid drawScene()//glutpostredisplay가 호출되면 DisplayFunc에 등록된 콜백함수가 호출된다.
{
	glClear(GL_COLOR_BUFFER_BIT);
	glRectf(-RECTSIZE, -RECTSIZE, RECTSIZE, RECTSIZE);
	glutSwapBuffers();//더블버퍼모드이기때문에 flush대신에 glutswapbuffers를 호출한다.
}
GLvoid Reshape(int w, int h)
{
	glViewport(0, 0, w, h);
}
GLvoid MouseAction(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		//좌표 매핑한법:윈도우의 좌표는 x는 0~WIDTH y는 0~HEIGTH까진데 gl좌표는 -1.0f~1.0f의 정방 좌표를가짐.
		//우선 윈도 좌표 (x,y)에 각각 WIDTH / 2 , HEIGTH / 2 해주면 범위를 0.0f~2.0f로 정규화한 좌표가 나옴.
		//근데 아까 gl좌표계가 -1.0~1.0이라고 하였으므로 1.0을 빼줌. 
		//그리고 y좌표는 윈도 좌표계와 gl 좌표계가 방향이 반대이므로 마지막에 -를 붙여줌.
		auto mappedX = (GLfloat(x) / (WIDTH / 2)) - 1.0;
		auto mappedY = -((GLfloat(y) / (HEIGTH / 2)) - 1.0);
		if ((mappedX>=-RECTSIZE&&mappedX<= RECTSIZE)&&
			(mappedY >= -RECTSIZE && mappedY <= RECTSIZE))
		{
			glColor3f(urd(dre), urd(dre), urd(dre));
		}
		else
		{
			glClearColor(urd(dre), urd(dre), urd(dre), 1.0f);
		}
		glutPostRedisplay();
	}
}